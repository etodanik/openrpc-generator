{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
#include "{{ pluginName }}Client.h"

#include "HttpTransport.h"
#include "JsonObjectConverter.h"
#include "JsonRpcClient.h"

U{{ pluginName }}Client::U{{ pluginName }}Client()
{
}

U{{ pluginName }}Client::U{{ pluginName }}Client(UJsonRpcClient* InJsonRpcClient) : JsonRpcClient(InJsonRpcClient)
{
}

void U{{ pluginName }}Client::InitHttpTransport(FString Url)
{
	JsonRpcClient = NewObject<UJsonRpcClient>();
	UHttpTransport* Transport = NewObject<UHttpTransport>();
	JsonRpcClient->Initialize(Transport);
}

{% for method in methods %}
void U{{ pluginName }}Client::{{ method.name | pascalCase }}(const F{{ method.name | pascalCase }}RequestArgs& RequestArgs, const F{{ method.name | pascalCase }}Callback& OnResponse)
{
	FString MethodName = FString("{{ method.name | camelCase }}");
	JsonRpcClient->SendRequest(MethodName, RequestArgs, [OnResponse](const TSharedPtr<FJsonValue>& JsonResult)
    {
        if (JsonResult.IsValid())
        {
            {{ macros.methodResponseType(method) }} Response;
            {% switch method.result.schema.type %}
                {% case "object" %} 
                FJsonObjectConverter::JsonObjectToUStruct(JsonResult->AsObject().ToSharedRef(), F{{ method.name | pascalCase }}Response::StaticStruct(), &Response, 0, 0);
                {% case "string" %}
                    Response = JsonResult->AsString();
                {% case "integer" %}
                    Response = JsonResult->AsNumber();
                {% case "boolean" %}
                    Response = JsonResult->AsBool();
                {% default %}
            {% endswitch %}
            OnResponse.ExecuteIfBound(Response);
        }
    });
}
{% endfor %}

{% endblock %}